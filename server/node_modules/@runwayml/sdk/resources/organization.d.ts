import { APIResource } from "../resource.js";
import * as Core from "../core.js";
export declare class Organization extends APIResource {
    /**
     * Get usage tier and credit balance information about the organization associated
     * with the API key used to make the request.
     */
    retrieve(options?: Core.RequestOptions): Core.APIPromise<OrganizationRetrieveResponse>;
    /**
     * Fetch credit usage data broken down by model and day for the organization
     * associated with the API key used to make the request. Up to 90 days of data can
     * be queried at a time.
     */
    retrieveUsage(body?: OrganizationRetrieveUsageParams, options?: Core.RequestOptions): Core.APIPromise<OrganizationRetrieveUsageResponse>;
    retrieveUsage(options?: Core.RequestOptions): Core.APIPromise<OrganizationRetrieveUsageResponse>;
}
export interface OrganizationRetrieveResponse {
    /**
     * The number of credits remaining in the organization account.
     */
    creditBalance: number;
    /**
     * Limits associated with the organization's tier.
     */
    tier: OrganizationRetrieveResponse.Tier;
    /**
     * Usage data for the organization.
     */
    usage: OrganizationRetrieveResponse.Usage;
}
export declare namespace OrganizationRetrieveResponse {
    /**
     * Limits associated with the organization's tier.
     */
    interface Tier {
        /**
         * The maximum number of credits that can be purchased in a month.
         */
        maxMonthlyCreditSpend: number;
        /**
         * An object containing model-specific limits. Each key represents a model.
         */
        models: Tier.Models;
    }
    namespace Tier {
        /**
         * An object containing model-specific limits. Each key represents a model.
         */
        interface Models {
            /**
             * Limits associated with the act_two model.
             */
            act_two?: Models.ActTwo;
            /**
             * Limits associated with the gen3a_turbo model.
             */
            gen3a_turbo?: Models.Gen3aTurbo;
            /**
             * Limits associated with the gen4_image model.
             */
            gen4_image?: Models.Gen4Image;
            /**
             * Limits associated with the gen4_turbo model.
             */
            gen4_turbo?: Models.Gen4Turbo;
            /**
             * Limits associated with the upscale_v1 model.
             */
            upscale_v1?: Models.UpscaleV1;
        }
        namespace Models {
            /**
             * Limits associated with the act_two model.
             */
            interface ActTwo {
                /**
                 * The maximum number of generations that can be run concurrently for this model.
                 */
                maxConcurrentGenerations: number;
                /**
                 * The maximum number of generations that can be created each day for this model.
                 */
                maxDailyGenerations: number;
            }
            /**
             * Limits associated with the gen3a_turbo model.
             */
            interface Gen3aTurbo {
                /**
                 * The maximum number of generations that can be run concurrently for this model.
                 */
                maxConcurrentGenerations: number;
                /**
                 * The maximum number of generations that can be created each day for this model.
                 */
                maxDailyGenerations: number;
            }
            /**
             * Limits associated with the gen4_image model.
             */
            interface Gen4Image {
                /**
                 * The maximum number of generations that can be run concurrently for this model.
                 */
                maxConcurrentGenerations: number;
                /**
                 * The maximum number of generations that can be created each day for this model.
                 */
                maxDailyGenerations: number;
            }
            /**
             * Limits associated with the gen4_turbo model.
             */
            interface Gen4Turbo {
                /**
                 * The maximum number of generations that can be run concurrently for this model.
                 */
                maxConcurrentGenerations: number;
                /**
                 * The maximum number of generations that can be created each day for this model.
                 */
                maxDailyGenerations: number;
            }
            /**
             * Limits associated with the upscale_v1 model.
             */
            interface UpscaleV1 {
                /**
                 * The maximum number of generations that can be run concurrently for this model.
                 */
                maxConcurrentGenerations: number;
                /**
                 * The maximum number of generations that can be created each day for this model.
                 */
                maxDailyGenerations: number;
            }
        }
    }
    /**
     * Usage data for the organization.
     */
    interface Usage {
        /**
         * Usage data for each model.
         */
        models: Usage.Models;
    }
    namespace Usage {
        /**
         * Usage data for each model.
         */
        interface Models {
            /**
             * Usage data for the act_two model.
             */
            act_two?: Models.ActTwo;
            /**
             * Usage data for the gen3a_turbo model.
             */
            gen3a_turbo?: Models.Gen3aTurbo;
            /**
             * Usage data for the gen4_image model.
             */
            gen4_image?: Models.Gen4Image;
            /**
             * Usage data for the gen4_turbo model.
             */
            gen4_turbo?: Models.Gen4Turbo;
            /**
             * Usage data for the upscale_v1 model.
             */
            upscale_v1?: Models.UpscaleV1;
        }
        namespace Models {
            /**
             * Usage data for the act_two model.
             */
            interface ActTwo {
                /**
                 * The number of generations that have been run for this model in the past day.
                 */
                dailyGenerations: number;
            }
            /**
             * Usage data for the gen3a_turbo model.
             */
            interface Gen3aTurbo {
                /**
                 * The number of generations that have been run for this model in the past day.
                 */
                dailyGenerations: number;
            }
            /**
             * Usage data for the gen4_image model.
             */
            interface Gen4Image {
                /**
                 * The number of generations that have been run for this model in the past day.
                 */
                dailyGenerations: number;
            }
            /**
             * Usage data for the gen4_turbo model.
             */
            interface Gen4Turbo {
                /**
                 * The number of generations that have been run for this model in the past day.
                 */
                dailyGenerations: number;
            }
            /**
             * Usage data for the upscale_v1 model.
             */
            interface UpscaleV1 {
                /**
                 * The number of generations that have been run for this model in the past day.
                 */
                dailyGenerations: number;
            }
        }
    }
}
export interface OrganizationRetrieveUsageResponse {
    /**
     * The list of models with usage during the queried time range.
     */
    models: Array<'upscale_v1' | 'act_two' | 'gen4_image' | 'gen3a_turbo' | 'gen4_turbo'>;
    results: Array<OrganizationRetrieveUsageResponse.Result>;
}
export declare namespace OrganizationRetrieveUsageResponse {
    interface Result {
        /**
         * The date of the usage data in ISO-8601 format (YYYY-MM-DD). All dates are in
         * UTC.
         */
        date: string;
        /**
         * The credits used per model for the given date.
         */
        usedCredits: Array<Result.UsedCredit>;
    }
    namespace Result {
        interface UsedCredit {
            /**
             * The number of credits used for the model.
             */
            amount: number;
            /**
             * The model whose usage resulted in the credit usage.
             */
            model: 'upscale_v1' | 'act_two' | 'gen4_image' | 'gen3a_turbo' | 'gen4_turbo';
        }
    }
}
export interface OrganizationRetrieveUsageParams {
    /**
     * The end date of the usage data in ISO-8601 format (YYYY-MM-DD), not inclusive.
     * If unspecified, it will default to thirty days after the start date. Must be
     * less than or equal to 90 days after the start date. All dates are in UTC.
     */
    beforeDate?: string;
    /**
     * The start date of the usage data in ISO-8601 format (YYYY-MM-DD). If
     * unspecified, it will default to 30 days before the current date. All dates are
     * in UTC.
     */
    startDate?: string;
}
export declare namespace Organization {
    export { type OrganizationRetrieveResponse as OrganizationRetrieveResponse, type OrganizationRetrieveUsageResponse as OrganizationRetrieveUsageResponse, type OrganizationRetrieveUsageParams as OrganizationRetrieveUsageParams, };
}
//# sourceMappingURL=organization.d.ts.map