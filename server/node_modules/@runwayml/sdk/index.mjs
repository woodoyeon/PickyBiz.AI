// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var _RunwayML_instances, _a, _RunwayML_baseURLOverridden;
import * as Core from "./core.mjs";
import * as Errors from "./error.mjs";
import * as Uploads from "./uploads.mjs";
import * as API from "./resources/index.mjs";
import { CharacterPerformance, } from "./resources/character-performance.mjs";
import { ImageToVideo, } from "./resources/image-to-video.mjs";
import { Organization, } from "./resources/organization.mjs";
import { Tasks } from "./resources/tasks.mjs";
import { TextToImage } from "./resources/text-to-image.mjs";
import { VideoUpscale, } from "./resources/video-upscale.mjs";
/**
 * API Client for interfacing with the RunwayML API.
 */
export class RunwayML extends Core.APIClient {
    /**
     * API Client for interfacing with the RunwayML API.
     *
     * @param {string | undefined} [opts.apiKey=process.env['RUNWAYML_API_SECRET'] ?? undefined]
     * @param {string | undefined} [opts.runwayVersion=2024-11-06]
     * @param {string} [opts.baseURL=process.env['RUNWAYML_BASE_URL'] ?? https://api.dev.runwayml.com] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL = Core.readEnv('RUNWAYML_BASE_URL'), apiKey = Core.readEnv('RUNWAYML_API_SECRET'), runwayVersion = '2024-11-06', ...opts } = {}) {
        if (apiKey === undefined) {
            throw new Errors.RunwayMLError("The RUNWAYML_API_SECRET environment variable is missing or empty; either provide it, or instantiate the RunwayML client with an apiKey option, like new RunwayML({ apiKey: 'My API Key' }).");
        }
        const options = {
            apiKey,
            runwayVersion,
            ...opts,
            baseURL: baseURL || `https://api.dev.runwayml.com`,
        };
        if (Core.isRunningInBrowser()) {
            throw new Errors.RunwayMLError("It looks like you're running in a browser-like environment, which is disabled to protect your secret API credentials from attackers. If you have a strong business need for client-side use of this API, please open a GitHub issue with your use-case and security mitigations.");
        }
        super({
            baseURL: options.baseURL,
            baseURLOverridden: baseURL ? baseURL !== 'https://api.dev.runwayml.com' : false,
            timeout: options.timeout ?? 60000 /* 1 minute */,
            httpAgent: options.httpAgent,
            maxRetries: options.maxRetries,
            fetch: options.fetch,
        });
        _RunwayML_instances.add(this);
        this.tasks = new API.Tasks(this);
        this.imageToVideo = new API.ImageToVideo(this);
        this.textToImage = new API.TextToImage(this);
        this.videoUpscale = new API.VideoUpscale(this);
        this.characterPerformance = new API.CharacterPerformance(this);
        this.organization = new API.Organization(this);
        this._options = options;
        this.apiKey = apiKey;
        this.runwayVersion = runwayVersion;
    }
    defaultQuery() {
        return this._options.defaultQuery;
    }
    defaultHeaders(opts) {
        return {
            ...super.defaultHeaders(opts),
            'X-Runway-Version': this.runwayVersion,
            ...this._options.defaultHeaders,
        };
    }
    authHeaders(opts) {
        return { Authorization: `Bearer ${this.apiKey}` };
    }
}
_a = RunwayML, _RunwayML_instances = new WeakSet(), _RunwayML_baseURLOverridden = function _RunwayML_baseURLOverridden() {
    return this.baseURL !== 'https://api.dev.runwayml.com';
};
RunwayML.RunwayML = _a;
RunwayML.DEFAULT_TIMEOUT = 60000; // 1 minute
RunwayML.RunwayMLError = Errors.RunwayMLError;
RunwayML.APIError = Errors.APIError;
RunwayML.APIConnectionError = Errors.APIConnectionError;
RunwayML.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;
RunwayML.APIUserAbortError = Errors.APIUserAbortError;
RunwayML.NotFoundError = Errors.NotFoundError;
RunwayML.ConflictError = Errors.ConflictError;
RunwayML.RateLimitError = Errors.RateLimitError;
RunwayML.BadRequestError = Errors.BadRequestError;
RunwayML.AuthenticationError = Errors.AuthenticationError;
RunwayML.InternalServerError = Errors.InternalServerError;
RunwayML.PermissionDeniedError = Errors.PermissionDeniedError;
RunwayML.UnprocessableEntityError = Errors.UnprocessableEntityError;
RunwayML.toFile = Uploads.toFile;
RunwayML.fileFromPath = Uploads.fileFromPath;
RunwayML.Tasks = Tasks;
RunwayML.ImageToVideo = ImageToVideo;
RunwayML.TextToImage = TextToImage;
RunwayML.VideoUpscale = VideoUpscale;
RunwayML.CharacterPerformance = CharacterPerformance;
RunwayML.Organization = Organization;
export { toFile, fileFromPath } from "./uploads.mjs";
export { RunwayMLError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, NotFoundError, ConflictError, RateLimitError, BadRequestError, AuthenticationError, InternalServerError, PermissionDeniedError, UnprocessableEntityError, } from "./error.mjs";
export { TaskFailedError, TaskTimedOutError, AbortError } from "./lib/polling.mjs";
export default RunwayML;
//# sourceMappingURL=index.mjs.map