import { type Agent } from "./_shims/index.js";
import * as Core from "./core.js";
import * as Errors from "./error.js";
import * as Uploads from "./uploads.js";
import * as API from "./resources/index.js";
import { CharacterPerformance, CharacterPerformanceCreateParams, CharacterPerformanceCreateResponse } from "./resources/character-performance.js";
import { ImageToVideo, ImageToVideoCreateParams, ImageToVideoCreateResponse } from "./resources/image-to-video.js";
import { Organization, OrganizationRetrieveResponse, OrganizationRetrieveUsageParams, OrganizationRetrieveUsageResponse } from "./resources/organization.js";
import { TaskRetrieveResponse, Tasks } from "./resources/tasks.js";
import { TextToImage, TextToImageCreateParams, TextToImageCreateResponse } from "./resources/text-to-image.js";
import { VideoUpscale, VideoUpscaleCreateParams, VideoUpscaleCreateResponse } from "./resources/video-upscale.js";
export interface ClientOptions {
    /**
     * Defaults to process.env['RUNWAYML_API_SECRET'].
     */
    apiKey?: string | undefined;
    runwayVersion?: string | undefined;
    /**
     * Override the default base URL for the API, e.g., "https://api.example.com/v2/"
     *
     * Defaults to process.env['RUNWAYML_BASE_URL'].
     */
    baseURL?: string | null | undefined;
    /**
     * The maximum amount of time (in milliseconds) that the client should wait for a response
     * from the server before timing out a single request.
     *
     * Note that request timeouts are retried by default, so in a worst-case scenario you may wait
     * much longer than this timeout before the promise succeeds or fails.
     *
     * @unit milliseconds
     */
    timeout?: number | undefined;
    /**
     * An HTTP agent used to manage HTTP(S) connections.
     *
     * If not provided, an agent will be constructed by default in the Node.js environment,
     * otherwise no agent is used.
     */
    httpAgent?: Agent | undefined;
    /**
     * Specify a custom `fetch` function implementation.
     *
     * If not provided, we use `node-fetch` on Node.js and otherwise expect that `fetch` is
     * defined globally.
     */
    fetch?: Core.Fetch | undefined;
    /**
     * The maximum number of times that the client will retry a request in case of a
     * temporary failure, like a network error or a 5XX error from the server.
     *
     * @default 2
     */
    maxRetries?: number | undefined;
    /**
     * Default headers to include with every request to the API.
     *
     * These can be removed in individual requests by explicitly setting the
     * header to `undefined` or `null` in request options.
     */
    defaultHeaders?: Core.Headers | undefined;
    /**
     * Default query parameters to include with every request to the API.
     *
     * These can be removed in individual requests by explicitly setting the
     * param to `undefined` in request options.
     */
    defaultQuery?: Core.DefaultQuery | undefined;
}
/**
 * API Client for interfacing with the RunwayML API.
 */
export declare class RunwayML extends Core.APIClient {
    #private;
    apiKey: string;
    runwayVersion: string;
    private _options;
    /**
     * API Client for interfacing with the RunwayML API.
     *
     * @param {string | undefined} [opts.apiKey=process.env['RUNWAYML_API_SECRET'] ?? undefined]
     * @param {string | undefined} [opts.runwayVersion=2024-11-06]
     * @param {string} [opts.baseURL=process.env['RUNWAYML_BASE_URL'] ?? https://api.dev.runwayml.com] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL, apiKey, runwayVersion, ...opts }?: ClientOptions);
    tasks: API.Tasks;
    imageToVideo: API.ImageToVideo;
    textToImage: API.TextToImage;
    videoUpscale: API.VideoUpscale;
    characterPerformance: API.CharacterPerformance;
    organization: API.Organization;
    protected defaultQuery(): Core.DefaultQuery | undefined;
    protected defaultHeaders(opts: Core.FinalRequestOptions): Core.Headers;
    protected authHeaders(opts: Core.FinalRequestOptions): Core.Headers;
    static RunwayML: typeof RunwayML;
    static DEFAULT_TIMEOUT: number;
    static RunwayMLError: typeof Errors.RunwayMLError;
    static APIError: typeof Errors.APIError;
    static APIConnectionError: typeof Errors.APIConnectionError;
    static APIConnectionTimeoutError: typeof Errors.APIConnectionTimeoutError;
    static APIUserAbortError: typeof Errors.APIUserAbortError;
    static NotFoundError: typeof Errors.NotFoundError;
    static ConflictError: typeof Errors.ConflictError;
    static RateLimitError: typeof Errors.RateLimitError;
    static BadRequestError: typeof Errors.BadRequestError;
    static AuthenticationError: typeof Errors.AuthenticationError;
    static InternalServerError: typeof Errors.InternalServerError;
    static PermissionDeniedError: typeof Errors.PermissionDeniedError;
    static UnprocessableEntityError: typeof Errors.UnprocessableEntityError;
    static toFile: typeof Uploads.toFile;
    static fileFromPath: typeof Uploads.fileFromPath;
}
export declare namespace RunwayML {
    export type RequestOptions = Core.RequestOptions;
    export { Tasks as Tasks, type TaskRetrieveResponse as TaskRetrieveResponse };
    export { ImageToVideo as ImageToVideo, type ImageToVideoCreateResponse as ImageToVideoCreateResponse, type ImageToVideoCreateParams as ImageToVideoCreateParams, };
    export { TextToImage as TextToImage, type TextToImageCreateResponse as TextToImageCreateResponse, type TextToImageCreateParams as TextToImageCreateParams, };
    export { VideoUpscale as VideoUpscale, type VideoUpscaleCreateResponse as VideoUpscaleCreateResponse, type VideoUpscaleCreateParams as VideoUpscaleCreateParams, };
    export { CharacterPerformance as CharacterPerformance, type CharacterPerformanceCreateResponse as CharacterPerformanceCreateResponse, type CharacterPerformanceCreateParams as CharacterPerformanceCreateParams, };
    export { Organization as Organization, type OrganizationRetrieveResponse as OrganizationRetrieveResponse, type OrganizationRetrieveUsageResponse as OrganizationRetrieveUsageResponse, type OrganizationRetrieveUsageParams as OrganizationRetrieveUsageParams, };
}
export { toFile, fileFromPath } from "./uploads.js";
export { RunwayMLError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, NotFoundError, ConflictError, RateLimitError, BadRequestError, AuthenticationError, InternalServerError, PermissionDeniedError, UnprocessableEntityError, } from "./error.js";
export { TaskFailedError, TaskTimedOutError, WaitForTaskOutputOptions, AbortError } from "./lib/polling.js";
export default RunwayML;
//# sourceMappingURL=index.d.ts.map