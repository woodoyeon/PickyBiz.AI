"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _RunwayML_instances, _a, _RunwayML_baseURLOverridden;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbortError = exports.TaskTimedOutError = exports.TaskFailedError = exports.UnprocessableEntityError = exports.PermissionDeniedError = exports.InternalServerError = exports.AuthenticationError = exports.BadRequestError = exports.RateLimitError = exports.ConflictError = exports.NotFoundError = exports.APIUserAbortError = exports.APIConnectionTimeoutError = exports.APIConnectionError = exports.APIError = exports.RunwayMLError = exports.fileFromPath = exports.toFile = exports.RunwayML = void 0;
const Core = __importStar(require("./core.js"));
const Errors = __importStar(require("./error.js"));
const Uploads = __importStar(require("./uploads.js"));
const API = __importStar(require("./resources/index.js"));
const character_performance_1 = require("./resources/character-performance.js");
const image_to_video_1 = require("./resources/image-to-video.js");
const organization_1 = require("./resources/organization.js");
const tasks_1 = require("./resources/tasks.js");
const text_to_image_1 = require("./resources/text-to-image.js");
const video_upscale_1 = require("./resources/video-upscale.js");
/**
 * API Client for interfacing with the RunwayML API.
 */
class RunwayML extends Core.APIClient {
    /**
     * API Client for interfacing with the RunwayML API.
     *
     * @param {string | undefined} [opts.apiKey=process.env['RUNWAYML_API_SECRET'] ?? undefined]
     * @param {string | undefined} [opts.runwayVersion=2024-11-06]
     * @param {string} [opts.baseURL=process.env['RUNWAYML_BASE_URL'] ?? https://api.dev.runwayml.com] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL = Core.readEnv('RUNWAYML_BASE_URL'), apiKey = Core.readEnv('RUNWAYML_API_SECRET'), runwayVersion = '2024-11-06', ...opts } = {}) {
        if (apiKey === undefined) {
            throw new Errors.RunwayMLError("The RUNWAYML_API_SECRET environment variable is missing or empty; either provide it, or instantiate the RunwayML client with an apiKey option, like new RunwayML({ apiKey: 'My API Key' }).");
        }
        const options = {
            apiKey,
            runwayVersion,
            ...opts,
            baseURL: baseURL || `https://api.dev.runwayml.com`,
        };
        if (Core.isRunningInBrowser()) {
            throw new Errors.RunwayMLError("It looks like you're running in a browser-like environment, which is disabled to protect your secret API credentials from attackers. If you have a strong business need for client-side use of this API, please open a GitHub issue with your use-case and security mitigations.");
        }
        super({
            baseURL: options.baseURL,
            baseURLOverridden: baseURL ? baseURL !== 'https://api.dev.runwayml.com' : false,
            timeout: options.timeout ?? 60000 /* 1 minute */,
            httpAgent: options.httpAgent,
            maxRetries: options.maxRetries,
            fetch: options.fetch,
        });
        _RunwayML_instances.add(this);
        this.tasks = new API.Tasks(this);
        this.imageToVideo = new API.ImageToVideo(this);
        this.textToImage = new API.TextToImage(this);
        this.videoUpscale = new API.VideoUpscale(this);
        this.characterPerformance = new API.CharacterPerformance(this);
        this.organization = new API.Organization(this);
        this._options = options;
        this.apiKey = apiKey;
        this.runwayVersion = runwayVersion;
    }
    defaultQuery() {
        return this._options.defaultQuery;
    }
    defaultHeaders(opts) {
        return {
            ...super.defaultHeaders(opts),
            'X-Runway-Version': this.runwayVersion,
            ...this._options.defaultHeaders,
        };
    }
    authHeaders(opts) {
        return { Authorization: `Bearer ${this.apiKey}` };
    }
}
exports.RunwayML = RunwayML;
_a = RunwayML, _RunwayML_instances = new WeakSet(), _RunwayML_baseURLOverridden = function _RunwayML_baseURLOverridden() {
    return this.baseURL !== 'https://api.dev.runwayml.com';
};
RunwayML.RunwayML = _a;
RunwayML.DEFAULT_TIMEOUT = 60000; // 1 minute
RunwayML.RunwayMLError = Errors.RunwayMLError;
RunwayML.APIError = Errors.APIError;
RunwayML.APIConnectionError = Errors.APIConnectionError;
RunwayML.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;
RunwayML.APIUserAbortError = Errors.APIUserAbortError;
RunwayML.NotFoundError = Errors.NotFoundError;
RunwayML.ConflictError = Errors.ConflictError;
RunwayML.RateLimitError = Errors.RateLimitError;
RunwayML.BadRequestError = Errors.BadRequestError;
RunwayML.AuthenticationError = Errors.AuthenticationError;
RunwayML.InternalServerError = Errors.InternalServerError;
RunwayML.PermissionDeniedError = Errors.PermissionDeniedError;
RunwayML.UnprocessableEntityError = Errors.UnprocessableEntityError;
RunwayML.toFile = Uploads.toFile;
RunwayML.fileFromPath = Uploads.fileFromPath;
RunwayML.Tasks = tasks_1.Tasks;
RunwayML.ImageToVideo = image_to_video_1.ImageToVideo;
RunwayML.TextToImage = text_to_image_1.TextToImage;
RunwayML.VideoUpscale = video_upscale_1.VideoUpscale;
RunwayML.CharacterPerformance = character_performance_1.CharacterPerformance;
RunwayML.Organization = organization_1.Organization;
var uploads_1 = require("./uploads.js");
Object.defineProperty(exports, "toFile", { enumerable: true, get: function () { return uploads_1.toFile; } });
Object.defineProperty(exports, "fileFromPath", { enumerable: true, get: function () { return uploads_1.fileFromPath; } });
var error_1 = require("./error.js");
Object.defineProperty(exports, "RunwayMLError", { enumerable: true, get: function () { return error_1.RunwayMLError; } });
Object.defineProperty(exports, "APIError", { enumerable: true, get: function () { return error_1.APIError; } });
Object.defineProperty(exports, "APIConnectionError", { enumerable: true, get: function () { return error_1.APIConnectionError; } });
Object.defineProperty(exports, "APIConnectionTimeoutError", { enumerable: true, get: function () { return error_1.APIConnectionTimeoutError; } });
Object.defineProperty(exports, "APIUserAbortError", { enumerable: true, get: function () { return error_1.APIUserAbortError; } });
Object.defineProperty(exports, "NotFoundError", { enumerable: true, get: function () { return error_1.NotFoundError; } });
Object.defineProperty(exports, "ConflictError", { enumerable: true, get: function () { return error_1.ConflictError; } });
Object.defineProperty(exports, "RateLimitError", { enumerable: true, get: function () { return error_1.RateLimitError; } });
Object.defineProperty(exports, "BadRequestError", { enumerable: true, get: function () { return error_1.BadRequestError; } });
Object.defineProperty(exports, "AuthenticationError", { enumerable: true, get: function () { return error_1.AuthenticationError; } });
Object.defineProperty(exports, "InternalServerError", { enumerable: true, get: function () { return error_1.InternalServerError; } });
Object.defineProperty(exports, "PermissionDeniedError", { enumerable: true, get: function () { return error_1.PermissionDeniedError; } });
Object.defineProperty(exports, "UnprocessableEntityError", { enumerable: true, get: function () { return error_1.UnprocessableEntityError; } });
var polling_1 = require("./lib/polling.js");
Object.defineProperty(exports, "TaskFailedError", { enumerable: true, get: function () { return polling_1.TaskFailedError; } });
Object.defineProperty(exports, "TaskTimedOutError", { enumerable: true, get: function () { return polling_1.TaskTimedOutError; } });
Object.defineProperty(exports, "AbortError", { enumerable: true, get: function () { return polling_1.AbortError; } });
exports = module.exports = RunwayML;
exports.default = RunwayML;
//# sourceMappingURL=index.js.map