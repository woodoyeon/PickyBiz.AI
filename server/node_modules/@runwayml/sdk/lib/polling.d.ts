                              
import type { RunwayML } from "../index.js";
import * as Core from "../core.js";
import { TaskRetrieveResponse } from "../resources/tasks.js";
export declare class TaskFailedError extends Error {
    taskDetails: TaskRetrieveResponse;
    constructor(taskDetails: TaskRetrieveResponse);
}
export declare class TaskTimedOutError extends Error {
    taskDetails: TaskRetrieveResponse;
    constructor(taskDetails: TaskRetrieveResponse);
}
export interface WaitForTaskOutputOptions {
    /**
     * The maximum amount of time to wait for the task to complete in milliseconds. If not
     * specified, the default timeout is 10 minutes. Will raise a `TaskTimeoutError` if the
     * task does not complete within the timeout. Setting this to `null` will wait
     * indefinitely (disabling the timeout). Disabling the timeout is not recommended.
     * as it may cause your server to experience issues if your Runway API organization
     * reaches its concurrency limit or if Runway experiences an outage.
     */
    timeout?: number | null;
    /**
     * Passing an `AbortSignal` allows you to stop waiting for the task to complete.
     * If you are using `waitForTaskOutput` in the handler for an incoming request,
     * `waitForTaskOutput` will not stop polling if the client connection is closed.
     * Passing an `AbortSignal` safely stops polling, preventing memory leaks and
     * ensuring you do not create too many requests to the Runway API.
     */
    abortSignal?: AbortSignal;
}
export declare class AbortError extends Error {
    code: number;
    constructor();
}
export type APIPromiseWithAwaitableTask<T extends {
    id: string;
}> = Core.APIPromise<T> & {
    /**
     * When called, this will wait until the task is complete.
     *
     * If the task fails or is cancelled, a `TaskFailedError` will be thrown.
     */
    waitForTaskOutput: (options?: WaitForTaskOutputOptions) => Promise<TaskRetrieveResponse>;
};
export declare function wrapAsWaitableResource<T extends {
    id: string;
}>(client: RunwayML): (responsePromise: Core.APIPromise<T>, skipInitialWait?: boolean) => APIPromiseWithAwaitableTask<T>;
//# sourceMappingURL=polling.d.ts.map